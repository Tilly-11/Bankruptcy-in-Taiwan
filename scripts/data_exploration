#Nulls check
nans_by_col = pd.Series(df.isnull().sum(), index=df.columns)
print("nans_by_col shape:", nans_by_col.shape)
nans_by_col.tail()


#Imbalance check
df["bankrupt"].value_counts(normalize=True)



# Plot class balance
df["bankrupt"].value_counts(normalize=True).plot(
    kind="bar",
    xlabel= "Bankrupt",
    ylabel= "Frequency"
);


#Creation of Feature matrix X and target vector y
target = "bankrupt"
X = df.drop(columns= target)
y = df[target]
print("X shape:", X.shape)
print("y shape:", y.shape)


#Divide into training and test sets using a randomized split.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)


#Resampling using RandomOverSampler
over_sampler = RandomOverSampler(random_state=42)
X_train_over, y_train_over = over_sampler.fit_resample(X_train, y_train)
print("X_train_over shape:", X_train_over.shape)
X_train_over.head()
